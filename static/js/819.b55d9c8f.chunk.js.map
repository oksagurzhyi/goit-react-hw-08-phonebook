{"version":3,"file":"static/js/819.b55d9c8f.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/components/Contact/Contact.module.css?03fd","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formContact\":\"ContactForm_formContact__CkY07\",\"labelContact\":\"ContactForm_labelContact__r8s5+\",\"inputContact\":\"ContactForm_inputContact__ylxPW\",\"btnSubmit\":\"ContactForm_btnSubmit__+7wnS\"};","export const filterSelector = state => state.filter;\n\nexport const contactsSelector = state => state.contacts;\n\nexport const isLoadingSelector = state => state.contacts.isLoading;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Input } from '@chakra-ui/react';\nimport css from './ContactForm.module.css';\nimport { contactsSelector } from 'redux/contacts/selectors';\nimport { addContactFetch } from 'redux/contacts/contactsOperations';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(contactsSelector);\n\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const input = event.currentTarget;\n    switch (input.name) {\n      case 'name':\n        setName(input.value);\n\n        break;\n      case 'number':\n        setNumber(input.value);\n\n        break;\n\n      default:\n        break;\n    }\n  };\n  const onSubmit = e => {\n    e.preventDefault();\n    const isContactInPhonebook = contacts.contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    if (isContactInPhonebook) {\n      return alert('This contact is already exist in your phonebook');\n    }\n\n    dispatch(addContactFetch({ name, number }));\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.formContact} onSubmit={onSubmit}>\n      <label className={css.labelContact}>\n        Name\n        <Input\n          className={css.inputContact}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.labelContact}>\n        Number\n        <Input\n          className={css.inputContact}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <Button type=\"submit\" className={css.btnSubmit}>\n        Add contact\n      </Button>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItems\":\"ContactList_contactItems__U8aDO\",\"contactItem\":\"ContactList_contactItem__ppNQ5\"};","// extracted by mini-css-extract-plugin\nexport default {\"btnDelete\":\"Contact_btnDelete__9qWfp\"};","import React from 'react';\nimport { Button } from '@chakra-ui/react';\nimport { deleteContactFetch } from '../../redux/contacts/contactsOperations';\nimport PropTypes from 'prop-types';\nimport css from './Contact.module.css';\nimport { useDispatch } from 'react-redux';\n\nexport const Contact = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <p>\n        {name}: {number}\n      </p>\n      <Button\n        type=\"button\"\n        className={css.btnDelete}\n        onClick={() => dispatch(deleteContactFetch(id))}\n      >\n        Delete\n      </Button>\n    </div>\n  );\n};\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport css from './ContactList.module.css';\nimport { Contact } from 'components/Contact/Contact';\nimport { contactsSelector, filterSelector } from 'redux/contacts/selectors';\nimport { fetchAllContacts } from 'redux/contacts/contactsOperations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(contactsSelector);\n\n  const filter = useSelector(filterSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const totalNumberOfContacts = contacts.contacts.length;\n\n  const normalizeName = filter.toLowerCase();\n\n  const visibleContacts = contacts.contacts.filter(contact => {\n    return contact.name.toLowerCase().includes(normalizeName);\n  });\n\n  return totalNumberOfContacts > 0 ? (\n    <ul className={css.contactItems}>\n      {visibleContacts.map(({ name, number, id }) => (\n        <li key={name} className={css.contactItem}>\n          <Contact name={name} number={number} id={id} />\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p>There is no such contact in your phonebook!</p>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"labelFilter\":\"Filter_labelFilter__7SBy1\",\"inputFilter\":\"Filter_inputFilter__8QMOp\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Input } from '@chakra-ui/react';\nimport { filterChange } from 'redux/contacts/filterSlice';\nimport css from './Filter.module.css';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <label className={css.labelFilter}>\n      Find contacts by name:\n      <Input\n        className={css.inputFilter}\n        type=\"text\"\n        onChange={e => {\n          dispatch(filterChange(e.currentTarget.value));\n        }}\n      />\n    </label>\n  );\n};\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\n\nconst Contacts = () => {\n  return (\n    <>\n      <h2>Contacts</h2>\n      <ContactForm />\n\n      <h2> Contacts:</h2>\n      <Filter />\n\n      <ContactList />\n    </>\n  );\n};\nexport default Contacts;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n    }),\n    [htmlProps],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["filterSelector","state","filter","contactsSelector","contacts","ContactForm","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleChange","event","input","currentTarget","value","className","css","onSubmit","e","preventDefault","some","contact","toLowerCase","alert","addContactFetch","I","type","onChange","pattern","title","required","Contact","id","onClick","deleteContactFetch","ContactList","useEffect","fetchAllContacts","totalNumberOfContacts","length","normalizeName","visibleContacts","includes","map","Filter","filterChange","createContext","errorMessage","FormControlStylesProvider","useFormControlStyles","strict","FormControlProvider","useFormControlContext","useFormControlProvider","ownProps","forwardRef","idProp","getLabelProps","context","useMultiStyleConfig","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","ref","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","getRequiredIndicatorProps","children","onFocus","onBlur","FormControl","styles","props","omitThemingProps","div","__css","cx","displayName","chakra","field","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","rest","push","disabled","join","_a","_b","_c","useFormControl","callAllHandlers","htmlSize","size","Input"],"sourceRoot":""}